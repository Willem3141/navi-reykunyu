<!doctype html>

<html>
	<head>
		<meta charset="utf-8">
		<title>Sources editor &bull; Reykunyu</title>
		<link rel="stylesheet" type="text/css" href="aysrungsiyu/semantic/dist/semantic.css">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link href="tìlam/tìlam.css" rel="stylesheet">
		<link rel="manifest" href="manifest.webmanifest">
	</head>
	<body data-url="<%= post_url %>">
		<div class="container">
			<%- include('header.ejs') %>

			<p>On this page, you can edit Reykunyu's source data. To edit, just type in a text field. Then as soon as you move to another text field, the text you typed will be stored automatically (so you don't need to click a save button).</p>
			<p>The source data is represented as follows:</p>
			<ul>
				<li>A source is represented by four elements: the <b>name</b> (e.g., &lsquo;Na'viteri&rsquo;, &lsquo;LN Forum&rsquo;, &lsquo;ASG&rsquo;), the <b>URL</b> (e.g., the link to the specific Na'viteri blog post), the <b>date</b> (when the source was published, in <i>yyyy-mm-dd</i> format, and optionally a short <b>remark</b> explaining what aspect of the word was clarified by this source (this is useful when a word has more than one source).</li>
				<li>The elements are separated by pipes, for example: <code>Na'viteri | https://... | 2022-07-10 | clarified stress</code>.</li>
				<li>For words sourced from the ASG, the URL and date are unnecessary and you can just write <code>ASG</code>.</li>
				<li>Words can have more than one source. These can be separated by double pipes (<code>||</code>).</li>
			</ul>
			<div class="ui section divider"></div>
			<div class="ui form">
				<table class="ui table">
					<thead>
						<tr>
							<th class="four wide">Word</th>
							<th style="min-width: 66%;">Source</th>
						</tr>
					</thead>
					<tbody>
						<%
						function getSourceString(source) {
							if (!source) {
								return '';
							}
							let sources = [];
							for (const s of source) {
								sources.push(s.join(' | '));
							}
							return sources.join(' || ');
						}
						%>
						<% let ids = [];
						for (let id in words) {
							ids.push(id);
						}
						const collator = new Intl.Collator();
						const removeMarkup = (word) => word.replaceAll('/', '').replaceAll('[', '').replaceAll(']', '');
						const htmlMarkup = (word) => word.replaceAll('/', '').replaceAll('[', '<span class="stressed">').replaceAll(']', '</span>');
						const sourceDate = (word) => {
							if (!word.hasOwnProperty('source')) {
								return '';
							}
							if (word['source'].length === 0) {
								return '';
							}
							if (word['source'][0].length < 3) {
								return '';
							}
							return word['source'][0][2];
						};
						ids.sort((a, b) => {
							const firstDate = sourceDate(words[a]);
							const secondDate = sourceDate(words[b]);
							const result = collator.compare(firstDate, secondDate);
							if (result !== 0) {
								return result;
							}
							return collator.compare(removeMarkup(words[a]["na'vi"]), removeMarkup(words[b]["na'vi"]));
						});
						for (let id of ids) {
							const word = words[id];
						%>
						<tr>
							<td>
								<%- htmlMarkup(word["na'vi"]) %><span class="muted"> (<%= word['type'] %>)</span>
							</td>
							<td>
								<input class="source-field" data-json="<%= JSON.stringify(word) %>" value="<%= getSourceString(word['source']) %>">
							</td>
						</tr>
						<% } %>
					</tbody>
				</table>
			</div>
		</div>

		<script src="aysrungsiyu/jquery/jquery-3.3.1.js"></script>
		<script src="aysrungsiyu/semantic/dist/semantic.js"></script>
		<script src="ayvefya/sourcesEditor.js"></script>
		<script src="ayvefya/ui-translations.js"></script>
	</body>
</html>

