/// Unit tests for the noun conjugator and parser

import { describe, test } from 'node:test';
import assert from 'node:assert';

import { conjugate, conjugateSimple } from '../src/nouns/conjugator';
import { parse } from '../src/nouns/parser';
import * as conjugationString from '../src/conjugationString';
import { count } from 'node:console';

/**
 * Performs one noun conjugation and noun parsing test.
 * 
 * Firstly, tests if conjugating the given root with the given affixes results
 * in the exact expected result (conjugation string).
 * 
 * Then, tests if throwing the possibilities generated by the conjugation string
 * into the noun parser actually retrieves the original root and affixes. Noun
 * parsing may result in a lot of possible results, and we are in fact not
 * really interested in testing whether the parser returns _superfluous_
 * results; we only want to ensure that the correct answer is in the result set.
 * Therefore this method merely tests if the expected root/affix combination is
 * in the result set.
 */
function testConjugation(root: string, affixes: string[], expectedResult: string, loanword?: boolean): void {
	let dialect = 'FN';
	const conjugationResult = conjugate(root, affixes, dialect, loanword);
	assert.strictEqual(conjugationResult, expectedResult);

	for (const conjugatedForm of conjugationString.formsFromString(expectedResult)) {
		const parseResult = parse(conjugatedForm.toLowerCase(), dialect, loanword);
		let found = false;
		for (const possibility of parseResult) {
			// ignore corrections; the parse result should be exact
			if (possibility.correction) {
				continue;
			}
			// special case for omitted (ay): the parser returns "(ay)" for
			// that, but the conjugator just expects "ay"
			if (possibility.affixes[1] === '(ay)') {
				possibility.affixes[1] = 'ay';
			}
			if (possibility.root === root.toLowerCase() && JSON.stringify(possibility.affixes) === JSON.stringify(affixes)) {
				found = true;
			}
		}
		if (!found) {
			assert.fail('"' + root + '" with affixes ' + JSON.stringify(affixes) +
				' was not in the parsing result set for "' + conjugatedForm + '"');
		}
	}
}

describe('noun conjugations', () => {

	describe('determiner prefixes', () => {
		test('are prepended to the noun', (t) => {
			testConjugation('fwampop', ['fì', '', '', '', '', '', ''], 'fì----fwampop-----');
			testConjugation('fwampop', ['tsa', '', '', '', '', '', ''], 'tsa----fwampop-----');
			testConjugation('fwampop', ['pe', '', '', '', '', '', ''], 'pe----fwampop-----');
			testConjugation('fwampop', ['fra', '', '', '', '', '', ''], 'fra----fwampop-----');
		});

		test('in the case of pe+, lenite the noun', (t) => {
			testConjugation('kelku', ['pe', '', '', '', '', '', ''], 'pe---h-elku-----');
		});

		test('in the case of other determiners, do not lenite the noun', (t) => {
			testConjugation('kelku', ['fì', '', '', '', '', '', ''], 'fì----kelku-----');
			testConjugation('kelku', ['tsa', '', '', '', '', '', ''], 'tsa----kelku-----');
			testConjugation('kelku', ['fra', '', '', '', '', '', ''], 'fra----kelku-----');
		});

		test('contract when the noun starts with the same letter', (t) => {
			testConjugation('ìlva', ['fì', '', '', '', '', '', ''], 'f----ìlva-----');
			testConjugation('atan', ['tsa', '', '', '', '', '', ''], 'ts----atan-----');
			testConjugation('ekxan', ['pe', '', '', '', '', '', ''], 'p----ekxan-----');
			testConjugation('atan', ['fra', '', '', '', '', '', ''], 'fr----atan-----');
		});

		test('contract when the noun starts with the capitalized same letter', (t) => {
			testConjugation('Ìlva', ['fì', '', '', '', '', '', ''], 'f----Ìlva-----');
			testConjugation('Atan', ['tsa', '', '', '', '', '', ''], 'ts----Atan-----');
			testConjugation('Ekxan', ['pe', '', '', '', '', '', ''], 'p----Ekxan-----');
			testConjugation('Atan', ['fra', '', '', '', '', '', ''], 'fr----Atan-----');
		});

		test('in the case of pe+, also contract if the noun starts with e- after lenition', (t) => {
			testConjugation('\'eylan', ['pe', '', '', '', '', '', ''], 'p----eylan-----');
		});
	});

	describe('plural prefixes', () => {
		describe('the dual prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('fwampop', ['', 'me', '', '', '', '', ''], '-me---fwampop-----');
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('Fwampop', ['', 'me', '', '', '', '', ''], '-me---Fwampop-----');
			});

			test('drops its -e if the noun starts with e-', (t) => {
				testConjugation('ekxan', ['', 'me', '', '', '', '', ''], '-m---ekxan-----');
				testConjugation('Ekxan', ['', 'me', '', '', '', '', ''], '-m---Ekxan-----');
			});

			test('drops its -e if the noun starts with ew-/ey-', (t) => {
				testConjugation('ewro', ['', 'me', '', '', '', '', ''], '-m---ewro-----');
				testConjugation('Ewro', ['', 'me', '', '', '', '', ''], '-m---Ewro-----');
				testConjugation('eyktan', ['', 'me', '', '', '', '', ''], '-m---eyktan-----');
				testConjugation('Eyktan', ['', 'me', '', '', '', '', ''], '-m---Eyktan-----');
			});

			test('drops its -e if the noun starts with e- after lenition', (t) => {
				testConjugation('\'eylan', ['', 'me', '', '', '', '', ''], '-m---eylan-----');
				testConjugation('\'Eylan', ['', 'me', '', '', '', '', ''], '-m---Eylan-----');
			});

			test('lenites the noun', (t) => {
				testConjugation('kelku', ['', 'me', '', '', '', '', ''], '-me--h-elku-----');
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('\'llngo', ['', 'me', '', '', '', '', ''], '-me---\'llngo-----');
				testConjugation('\'rrpxom', ['', 'me', '', '', '', '', ''], '-me---\'rrpxom-----');
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('Kelku', ['', 'me', '', '', '', '', ''], '-me--H-elku-----');
				testConjugation('Txon', ['', 'me', '', '', '', '', ''], '-me--T-on-----');
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('fwampop', ['fì', 'me', '', '', '', '', ''], 'fì-me---fwampop-----');
				testConjugation('fwampop', ['tsa', 'me', '', '', '', '', ''], 'tsa-me---fwampop-----');
				testConjugation('fwampop', ['pe', 'me', '', '', '', '', ''], 'pe-me---fwampop-----');
				testConjugation('fwampop', ['fra', 'me', '', '', '', '', ''], 'fra-me---fwampop-----');
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('kelku', ['fì', 'me', '', '', '', '', ''], 'fì-me--h-elku-----');
				testConjugation('kelku', ['tsa', 'me', '', '', '', '', ''], 'tsa-me--h-elku-----');
				testConjugation('kelku', ['pe', 'me', '', '', '', '', ''], 'pe-me--h-elku-----');
				testConjugation('kelku', ['fra', 'me', '', '', '', '', ''], 'fra-me--h-elku-----');
			});
		});

		describe('the trial prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('fwampop', ['', 'pxe', '', '', '', '', ''], '-pxe---fwampop-----');
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('Fwampop', ['', 'pxe', '', '', '', '', ''], '-pxe---Fwampop-----');
			});

			test('drops its -e if the noun starts with e-', (t) => {
				testConjugation('ekxan', ['', 'pxe', '', '', '', '', ''], '-px---ekxan-----');
				testConjugation('Ekxan', ['', 'pxe', '', '', '', '', ''], '-px---Ekxan-----');
			});

			test('drops its -e if the noun starts with ew-/ey-', (t) => {
				testConjugation('ewro', ['', 'pxe', '', '', '', '', ''], '-px---ewro-----');
				testConjugation('Ewro', ['', 'pxe', '', '', '', '', ''], '-px---Ewro-----');
				testConjugation('eyktan', ['', 'pxe', '', '', '', '', ''], '-px---eyktan-----');
				testConjugation('Eyktan', ['', 'pxe', '', '', '', '', ''], '-px---Eyktan-----');
			});

			test('drops its -e if the noun starts with e- after lenition', (t) => {
				testConjugation('\'eylan', ['', 'pxe', '', '', '', '', ''], '-px---eylan-----');
				testConjugation('\'Eylan', ['', 'pxe', '', '', '', '', ''], '-px---Eylan-----');
			});

			test('lenites the noun', (t) => {
				testConjugation('kelku', ['', 'pxe', '', '', '', '', ''], '-pxe--h-elku-----');
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('\'llngo', ['', 'pxe', '', '', '', '', ''], '-pxe---\'llngo-----');
				testConjugation('\'rrpxom', ['', 'pxe', '', '', '', '', ''], '-pxe---\'rrpxom-----');
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('Kelku', ['', 'pxe', '', '', '', '', ''], '-pxe--H-elku-----');
				testConjugation('Txon', ['', 'pxe', '', '', '', '', ''], '-pxe--T-on-----');
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('fwampop', ['fì', 'pxe', '', '', '', '', ''], 'fì-pxe---fwampop-----');
				testConjugation('fwampop', ['tsa', 'pxe', '', '', '', '', ''], 'tsa-pxe---fwampop-----');
				testConjugation('fwampop', ['fra', 'pxe', '', '', '', '', ''], 'fra-pxe---fwampop-----');
			});

			test('when combined with pe+, gets lenited itself', (t) => {
				testConjugation('fwampop', ['pe', 'pxe', '', '', '', '', ''], 'pe-pe---fwampop-----');
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('kelku', ['fì', 'pxe', '', '', '', '', ''], 'fì-pxe--h-elku-----');
				testConjugation('kelku', ['tsa', 'pxe', '', '', '', '', ''], 'tsa-pxe--h-elku-----');
				testConjugation('kelku', ['pe', 'pxe', '', '', '', '', ''], 'pe-pe--h-elku-----');
				testConjugation('kelku', ['fra', 'pxe', '', '', '', '', ''], 'fra-pxe--h-elku-----');
			});
		});

		describe('the general plural prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('fwampop', ['', 'ay', '', '', '', '', ''], '-ay---fwampop-----');
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('Fwampop', ['', 'ay', '', '', '', '', ''], '-ay---Fwampop-----');
			});

			test('lenites the noun', (t) => {
				testConjugation('kelku', ['', 'ay', '', '', '', '', ''], '-(ay)--h-elku-----');
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('\'llngo', ['', 'ay', '', '', '', '', ''], '-ay---\'llngo-----');
				testConjugation('\'rrpxom', ['', 'ay', '', '', '', '', ''], '-ay---\'rrpxom-----');
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('Kelku', ['', 'ay', '', '', '', '', ''], '-(ay)--H-elku-----');
				testConjugation('Txon', ['', 'ay', '', '', '', '', ''], '-(ay)--T-on-----');
			});

			test('is optional if the noun underwent lenition', (t) => {
				testConjugation('tute', ['', 'ay', '', '', '', '', ''], '-(ay)--s-ute-----');
				testConjugation('pxen', ['', 'ay', '', '', '', '', ''], '-(ay)--p-en-----');
				testConjugation('\'eylan', ['', 'ay', '', '', '', '', ''], '-(ay)---eylan-----');
			});

			test('is not optional if the noun did not undergo lenition', (t) => {
				testConjugation('lun', ['', 'ay', '', '', '', '', ''], '-ay---lun-----');
				testConjugation('sngel', ['', 'ay', '', '', '', '', ''], '-ay---sngel-----');
				testConjugation('zum', ['', 'ay', '', '', '', '', ''], '-ay---zum-----');
			});

			test('is not optional in the case of \'u', (t) => {
				testConjugation('\'u', ['', 'ay', '', '', '', '', ''], '-ay---u-----');
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('fwampop', ['fì', 'ay', '', '', '', '', ''], 'f(ì)-ay---fwampop-----');
				testConjugation('fwampop', ['tsa', 'ay', '', '', '', '', ''], 'ts-ay---fwampop-----');
				testConjugation('fwampop', ['pe', 'ay', '', '', '', '', ''], 'p-ay---fwampop-----');
				testConjugation('fwampop', ['fra', 'ay', '', '', '', '', ''], 'fr-ay---fwampop-----');
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('kelku', ['fì', 'ay', '', '', '', '', ''], 'f(ì)-ay--h-elku-----');
				testConjugation('kelku', ['tsa', 'ay', '', '', '', '', ''], 'ts-ay--h-elku-----');
				testConjugation('kelku', ['pe', 'ay', '', '', '', '', ''], 'p-ay--h-elku-----');
				testConjugation('kelku', ['fra', 'ay', '', '', '', '', ''], 'fr-ay--h-elku-----');
			});
		});
	});

	describe('stem prefixes', () => {
		test('are prepended to the noun', (t) => {
			testConjugation('fwampop', ['', '', 'fne', '', '', '', ''], '--fne--fwampop-----');
		});

		test('are placed after a plural prefix', (t) => {
			testConjugation('fwampop', ['', 'me', 'fne', '', '', '', ''], '-me-fne--fwampop-----');
		});

		test('do not cause lenition', (t) => {
			testConjugation('kelku', ['', '', 'fne', '', '', '', ''], '--fne--kelku-----');
		});

		test('block earlier leniting prefixes from leniting the noun', (t) => {
			testConjugation('kelku', ['pe', '', 'fne', '', '', '', ''], 'pe--fne--kelku-----');
			testConjugation('kelku', ['', 'ay', 'fne', '', '', '', ''], '-ay-fne--kelku-----');
		});

		test('contract when the noun starts with the same letter', (t) => {
			testConjugation('ekxan', ['', '', 'fne', '', '', '', ''], '--fn--ekxan-----');
		});
	});

	describe('stem suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('fwampop', ['', '', '', 'fkeyk', '', '', ''], '----fwampop--fkeyk---');
			testConjugation('fwampop', ['', '', '', 'tsyìp', '', '', ''], '----fwampop--tsyìp---');
		});

		test('are placed before a determiner suffix', (t) => {
			testConjugation('ya', ['', '', '', 'fkeyk', 'pe', '', ''], '----ya--fkeyk-pe--');
		});

		test('determine the form of a following case suffix', (t) => {
			testConjugation('ya', ['', '', '', 'fkeyk', '', 't', ''], '----ya--fkeyk--it/ti-');
			testConjugation('ya', ['', '', '', 'tsyìp', '', 'r', ''], '----ya--tsyìp--ur-');
		});
	});

	describe('determiner suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('fwampop', ['', '', '', '', 'pe', '', ''], '----fwampop---pe--');
			testConjugation('fwampop', ['', '', '', '', 'o', '', ''], '----fwampop---o--');
		});

		test('are placed before a case suffix', (t) => {
			testConjugation('ya', ['', '', '', '', 'pe', 'l', ''], '----ya---pe-l-');
		});

		test('determine the form of a following case suffix', (t) => {
			testConjugation('fwampop', ['', '', '', '', 'pe', 't', ''], '----fwampop---pe-t(i)-');
			testConjugation('fwampop', ['', '', '', '', 'o', 'r', ''], '----fwampop---o-r(u)-');
		});
	});

	describe('case suffixes', () => {
		describe('the agentive suffix', () => {
			test('is -ìl for nouns ending in a consonant', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 'l', ''], '----fwampop----ìl-');
			});

			test('is -ìl for nouns ending in a pseudovowel', (t) => {
				testConjugation('\'ewll', ['', '', '', '', '', 'l', ''], '----\'ewll----ìl-');
				testConjugation('trr', ['', '', '', '', '', 'l', ''], '----trr----ìl-');
			});

			test('is -l for nouns ending in a vowel', (t) => {
				testConjugation('tute', ['', '', '', '', '', 'l', ''], '----tute----l-');
				testConjugation('tuté', ['', '', '', '', '', 'l', ''], '----tuté----l-');
				testConjugation('kelku', ['', '', '', '', '', 'l', ''], '----kelku----l-');
			});

			test('is -ìl for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'l', ''], '----taw----ìl-');
				testConjugation('pay', ['', '', '', '', '', 'l', ''], '----pay----ìl-');
				testConjugation('fahew', ['', '', '', '', '', 'l', ''], '----fahew----ìl-');
				testConjugation('kxeyey', ['', '', '', '', '', 'l', ''], '----kxeyey----ìl-');
			});

			test('is -ìl for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('Kelnì', ['', '', '', '', '', 'l', ''], '----Keln----ìl-', true);
				testConjugation('Kerìsmìsì', ['', '', '', '', '', 'l', ''], '----Kerìsmìs----ìl-', true);
			});
		});

		describe('the patientive suffix', () => {
			test('is -it/-ti for nouns ending in a consonant', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 't', ''], '----fwampop----it/ti-');
			});

			test('is -it/-ti for nouns ending in a pseudovowel', (t) => {
				testConjugation('\'ewll', ['', '', '', '', '', 't', ''], '----\'ewll----it/ti-');
				testConjugation('trr', ['', '', '', '', '', 't', ''], '----trr----it/ti-');
			});

			test('is -t(i) for nouns ending in a vowel', (t) => {
				testConjugation('tute', ['', '', '', '', '', 't', ''], '----tute----t(i)-');
				testConjugation('tuté', ['', '', '', '', '', 't', ''], '----tuté----t(i)-');
				testConjugation('kelku', ['', '', '', '', '', 't', ''], '----kelku----t(i)-');
			});

			test('is -it/-ti for nouns ending in the diphthongs -aw/-ew', (t) => {
				testConjugation('taw', ['', '', '', '', '', 't', ''], '----taw----it/ti-');
				testConjugation('fahew', ['', '', '', '', '', 't', ''], '----fahew----it/ti-');
			});

			test('is -(i)t/-ti for nouns ending in the diphthong -ay', (t) => {
				testConjugation('pay', ['', '', '', '', '', 't', ''], '----pay----it/t(i)-');
			});

			test('is -t/-ti for nouns ending in the diphthong -ey', (t) => {
				testConjugation('kxeyey', ['', '', '', '', '', 't', ''], '----kxeyey----t(i)-');
			});

			test('is -it for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('Kelnì', ['', '', '', '', '', 't', ''], '----Keln----it-', true);
			});

			test('is -it/-ti for loanwords ending in -ì with preceding f/s/ts, with the -ì dropping', (t) => {
				testConjugation('Kerìsmìsì', ['', '', '', '', '', 't', ''], '----Kerìsmìs----it/ti-', true);
			});
		});

		describe('the dative suffix', () => {
			test('is -ur for nouns ending in a consonant', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 'r', ''], '----fwampop----ur-');
			});

			test('is -ur for nouns ending in a pseudovowel', (t) => {
				testConjugation('\'ewll', ['', '', '', '', '', 'r', ''], '----\'ewll----ur-');
				testConjugation('trr', ['', '', '', '', '', 'r', ''], '----trr----ur-');
			});

			test('is -ur/-ru for nouns ending in \'', (t) => {
				testConjugation('olo\'', ['', '', '', '', '', 'r', ''], '----olo\'----ur/ru-');
			});

			test('is -r(u) for nouns ending in a vowel', (t) => {
				testConjugation('tute', ['', '', '', '', '', 'r', ''], '----tute----r(u)-');
				testConjugation('tuté', ['', '', '', '', '', 'r', ''], '----tuté----r(u)-');
				testConjugation('kelku', ['', '', '', '', '', 'r', ''], '----kelku----r(u)-');
			});

			test('is -ur/-ru for nouns ending in the diphthongs -ay/-ey', (t) => {
				testConjugation('pay', ['', '', '', '', '', 'r', ''], '----pay----ur/ru-');
				testConjugation('kxeyey', ['', '', '', '', '', 'r', ''], '----kxeyey----ur/ru-');
			});

			test('is -(u)r/-ru for nouns ending in the diphthong -aw', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'r', ''], '----taw----ur/r(u)-');
			});

			test('is -r/-ru for nouns ending in the diphthong -ew', (t) => {
				testConjugation('fahew', ['', '', '', '', '', 'r', ''], '----fahew----r(u)-');
			});

			test('is -ur for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('Kelnì', ['', '', '', '', '', 'r', ''], '----Keln----ur-', true);
				testConjugation('Kerìsmìsì', ['', '', '', '', '', 'r', ''], '----Kerìsmìs----ur-', true);
			});
		});

		describe('the genitive suffix', () => {
			test('is -ä for nouns ending in a consonant', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 'ä', ''], '----fwampop----ä-');
			});

			test('is -ä for nouns ending in a pseudovowel', (t) => {
				testConjugation('\'ewll', ['', '', '', '', '', 'ä', ''], '----\'ewll----ä-');
				testConjugation('trr', ['', '', '', '', '', 'ä', ''], '----trr----ä-');
			});

			test('is -ä for nouns ending in the vowels -o/-u', (t) => {
				testConjugation('alo', ['', '', '', '', '', 'ä', ''], '----alo----ä-');
				testConjugation('kelku', ['', '', '', '', '', 'ä', ''], '----kelku----ä-');
			});

			test('is -yä for nouns ending in vowels other than -o/-u', (t) => {
				testConjugation('\'ana', ['', '', '', '', '', 'ä', ''], '----\'ana----yä-');
				testConjugation('ftxozä', ['', '', '', '', '', 'ä', ''], '----ftxozä----yä-');
				testConjugation('tute', ['', '', '', '', '', 'ä', ''], '----tute----yä-');
				testConjugation('tuté', ['', '', '', '', '', 'ä', ''], '----tuté----yä-');
				testConjugation('awaiei', ['', '', '', '', '', 'ä', ''], '----awaiei----yä-');
				testConjugation('vospxì', ['', '', '', '', '', 'ä', ''], '----vospxì----yä-');
			});

			test('is -iä for nouns ending in -ia, with the -ia dropping', (t) => {
				testConjugation('soaia', ['', '', '', '', '', 'ä', ''], '----soai----ä-');
			});

			test('is -ä for the word Omatikaya', (t) => {
				testConjugation('Omatikaya', ['', '', '', '', '', 'ä', ''], '----Omatikaya----ä-');
			});

			test('is -ä for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'ä', ''], '----taw----ä-');
				testConjugation('pay', ['', '', '', '', '', 'ä', ''], '----pay----ä-');
				testConjugation('fahew', ['', '', '', '', '', 'ä', ''], '----fahew----ä-');
				testConjugation('kxeyey', ['', '', '', '', '', 'ä', ''], '----kxeyey----ä-');
			});

			test('is -ä for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('Kelnì', ['', '', '', '', '', 'ä', ''], '----Keln----ä-', true);
				testConjugation('Kerìsmìsì', ['', '', '', '', '', 'ä', ''], '----Kerìsmìs----ä-', true);
			});
		});

		describe('the topical suffix', () => {
			test('is -ìri for nouns ending in a consonant', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 'ri', ''], '----fwampop----ìri-');
			});

			test('is -ìri for nouns ending in a pseudovowel', (t) => {
				testConjugation('\'ewll', ['', '', '', '', '', 'ri', ''], '----\'ewll----ìri-');
				testConjugation('trr', ['', '', '', '', '', 'ri', ''], '----trr----ìri-');
			});

			test('is -ri for nouns ending in a vowel', (t) => {
				testConjugation('tute', ['', '', '', '', '', 'ri', ''], '----tute----ri-');
				testConjugation('tuté', ['', '', '', '', '', 'ri', ''], '----tuté----ri-');
				testConjugation('kelku', ['', '', '', '', '', 'ri', ''], '----kelku----ri-');
			});

			test('is -ri for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'ri', ''], '----taw----ri-');
				testConjugation('pay', ['', '', '', '', '', 'ri', ''], '----pay----ri-');
				testConjugation('fahew', ['', '', '', '', '', 'ri', ''], '----fahew----ri-');
				testConjugation('kxeyey', ['', '', '', '', '', 'ri', ''], '----kxeyey----ri-');
			});

			test('is -ìri for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('Kelnì', ['', '', '', '', '', 'ri', ''], '----Keln----ìri-', true);
				testConjugation('Kerìsmìsì', ['', '', '', '', '', 'ri', ''], '----Kerìsmìs----ìri-', true);
			});
		});

		describe('an adposition', () => {
			test('is appended to the noun', (t) => {
				testConjugation('fwampop', ['', '', '', '', '', 'talun', ''], '----fwampop----talun-');
				testConjugation('fwampop', ['', '', '', '', '', 'mì', ''], '----fwampop----mì-');
			});
		});
	});

	describe('final suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('fwampop', ['', '', '', '', '', '', 'sì'], '----fwampop-----sì');
		});
		test('are placed after a case suffix', (t) => {
			testConjugation('fwampop', ['', '', '', '', '', 'l', 'sì'], '----fwampop----ìl-sì');
			testConjugation('fwampop', ['', '', '', '', '', 'ftu', 'to'], '----fwampop----ftu-to');
		});
	});

	describe('simplified conjugation output', () => {
		test('behaves correctly with a case ending', (t) => {
			assert.strictEqual(conjugateSimple('tute', '', 'l', 'FN'), '-tute-l');
		});

		test('behaves correctly with a plural prefix', (t) => {
			assert.strictEqual(conjugateSimple('fwampop', 'me', '', 'FN'), 'me-fwampop-');
			assert.strictEqual(conjugateSimple('fwampop', 'pxe', '', 'FN'), 'pxe-fwampop-');
			assert.strictEqual(conjugateSimple('fwampop', 'ay', '', 'FN'), 'ay-fwampop-');
			assert.strictEqual(conjugateSimple('tute', 'me', '', 'FN'), 'me-{s}ute-');
			assert.strictEqual(conjugateSimple('tute', 'pxe', '', 'FN'), 'pxe-{s}ute-');
			assert.strictEqual(conjugateSimple('tute', 'ay', '', 'FN'), '(ay)-{s}ute-');
		});

		test('behaves correctly with a plural prefix and a case ending', (t) => {
			assert.strictEqual(conjugateSimple('tute', 'ay', 'l', 'FN'), '(ay)-{s}ute-l');
		});

		test('behaves correctly for nouns starting with an uppercase letter', (t) => {
			assert.strictEqual(conjugateSimple('Iknimaya', 'ay', 'l', 'FN'), 'ay-Iknimaya-l');
			assert.strictEqual(conjugateSimple('Kelutral', 'ay', 'l', 'FN'), '(ay)-{H}elutral-ìl');
		});
	});

	describe('tricky parsing cases: the parser', (t) => {
		test('should never return empty roots', (t) => {
			const result = parse('be', 'FN');
			for (const possibility of result) {
				if (possibility.root === '') {
					assert.fail('parser returned empty root');
				}
			}
		});

		test('shouldn\'t crash on empty or short inputs', (t) => {
			parse('', 'FN');
			parse('a', 'FN');
			parse('be', 'FN');
		});
	});
});
