/// Unit tests for the noun conjugator and parser

import { describe, test } from 'node:test';
import assert from 'node:assert';

import { conjugate, conjugateSimple } from '../src/nouns/conjugator';
import { parse } from '../src/nouns/parser';
import * as conjugationString from '../src/conjugationString';
import { count } from 'node:console';

/**
 * Performs one noun conjugation and noun parsing test.
 *
 * Firstly, tests if conjugating the given root with the given affixes results
 * in the exact expected result (conjugation string).
 *
 * Then, tests if throwing the possibilities generated by the conjugation string
 * into the noun parser actually retrieves the original root and affixes. Noun
 * parsing may result in a lot of possible results, and we are in fact not
 * really interested in testing whether the parser returns _superfluous_
 * results; we only want to ensure that the correct answer is in the result set.
 * Therefore this method merely tests if the expected root/affix combination is
 * in the result set.
 */
function testConjugation(root: string, affixes: string[], expectedResult: string[], loanword?: boolean): void {
	let dialect = 'FN';
	const conjugationResult = conjugationString.formsFromString(conjugate(root, affixes, dialect, loanword));
	if (!areArraysEqual(conjugationResult, expectedResult)) {
		assert.fail('Conjugation result didn\'t match expected value: ' +
			JSON.stringify(conjugationResult) + ' != ' + JSON.stringify(expectedResult));
	}

	root = root.toLowerCase();
	root = root.replaceAll('[', '')
		.replaceAll(']', '')
		.replaceAll('/', '');

	for (let conjugatedForm of expectedResult) {
		conjugatedForm = conjugatedForm.toLowerCase();
		conjugatedForm = conjugatedForm.replaceAll('[', '')
			.replaceAll(']', '')
			.replaceAll('/', '');
		const parseResult = parse(conjugatedForm, dialect, loanword);
		let found = false;
		for (const possibility of parseResult) {
			// ignore corrections; the parse result should be exact
			if (possibility.correction) {
				continue;
			}
			// special case for omitted (ay): the parser returns "(ay)" for
			// that, but the conjugator just expects "ay"
			if (possibility.affixes[1] === '(ay)') {
				possibility.affixes[1] = 'ay';
			}
			if (possibility.root === root && JSON.stringify(possibility.affixes) === JSON.stringify(affixes)) {
				found = true;
			}
		}
		if (!found) {
			assert.fail('"' + root + '" with affixes ' + JSON.stringify(affixes) +
				' was not in the parsing result set for "' + conjugatedForm + '"');
		}
	}
}

/** Determines whether two arrays have identical elements. */
function areArraysEqual(a: string[], b: string[]): boolean {
	if (a.length !== b.length) {
		return false;
	}
	a = a.sort();
	b = b.sort();
	for (let i = 0; i < a.length; i++) {
		if (a[i] !== b[i]) {
			return false;
		}
	}
	return true;
}

describe('noun conjugations', () => {

	describe('determiner prefixes', () => {
		test('are prepended to the noun', (t) => {
			testConjugation('[fwam]/pop', ['fì', '', '', '', '', '', ''], ['fì/[fwam]/pop']);
			testConjugation('[fwam]/pop', ['tsa', '', '', '', '', '', ''], ['tsa/[fwam]/pop']);
			testConjugation('[fwam]/pop', ['pe', '', '', '', '', '', ''], ['pe/[fwam]/pop']);
			testConjugation('[fwam]/pop', ['fra', '', '', '', '', '', ''], ['fra/[fwam]/pop']);
		});

		test('in the case of pe+, lenite the noun', (t) => {
			testConjugation('[kel]/ku', ['pe', '', '', '', '', '', ''], ['pe/[hel]/ku']);
			testConjugation('ko/[ren]', ['pe', '', '', '', '', '', ''], ['pe/ho/[ren]']);
		});

		test('in the case of other determiners, do not lenite the noun', (t) => {
			testConjugation('[kel]/ku', ['fì', '', '', '', '', '', ''], ['fì/[kel]/ku']);
			testConjugation('[kel]/ku', ['tsa', '', '', '', '', '', ''], ['tsa/[kel]/ku']);
			testConjugation('[kel]/ku', ['fra', '', '', '', '', '', ''], ['fra/[kel]/ku']);
		});

		test('for one-syllable roots, mark that root as stressed', () => {
			testConjugation('lun', ['pe', '', '', '', '', '', ''], ['pe/[lun]']);
			testConjugation('key', ['pe', '', '', '', '', '', ''], ['pe/[hey]']);
		});

		test('contract when the noun starts with the same letter', (t) => {
			testConjugation('[ìl]/va', ['fì', '', '', '', '', '', ''], ['[fìl]/va']);
			testConjugation('a/[tan]', ['tsa', '', '', '', '', '', ''], ['tsa/[tan]']);
			testConjugation('e/[kxan]', ['pe', '', '', '', '', '', ''], ['pe/[kxan]']);
			testConjugation('a/[tan]', ['fra', '', '', '', '', '', ''], ['fra/[tan]']);
		});

		test('contract when the noun starts with the capitalized same letter', (t) => {
			testConjugation('[Ìl]/va', ['fì', '', '', '', '', '', ''], ['[fÌl]/va']);
			testConjugation('A/[tan]', ['tsa', '', '', '', '', '', ''], ['tsA/[tan]']);
			testConjugation('E/[kxan]', ['pe', '', '', '', '', '', ''], ['pE/[kxan]']);
			testConjugation('A/[tan]', ['fra', '', '', '', '', '', ''], ['frA/[tan]']);
		});

		test('in the case of pe+, also contract if the noun starts with -e after lenition', (t) => {
			testConjugation('[\'ey]/lan', ['pe', '', '', '', '', '', ''], ['[pey]/lan']);
		});
	});

	describe('plural prefixes', () => {
		describe('the dual prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('[fwam]/pop', ['', 'me', '', '', '', '', ''], ['me/[fwam]/pop']);
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('[Fwam]/pop', ['', 'me', '', '', '', '', ''], ['me/[Fwam]/pop']);
			});

			test('drops its -e if the noun starts with e-', (t) => {
				testConjugation('e/[kxan]', ['', 'me', '', '', '', '', ''], ['me/[kxan]']);
				testConjugation('E/[kxan]', ['', 'me', '', '', '', '', ''], ['mE/[kxan]']);
			});

			test('drops its -e if the noun starts with ew-/ey-', (t) => {
				testConjugation('[ew]/ro', ['', 'me', '', '', '', '', ''], ['[mew]/ro']);
				testConjugation('[Ew]/ro', ['', 'me', '', '', '', '', ''], ['[mEw]/ro']);
				testConjugation('[eyk]/tan', ['', 'me', '', '', '', '', ''], ['[meyk]/tan']);
				testConjugation('[Eyk]/tan', ['', 'me', '', '', '', '', ''], ['[mEyk]/tan']);
			});

			test('drops its -e if the noun starts with e- after lenition', (t) => {
				testConjugation('[\'ey]/lan', ['', 'me', '', '', '', '', ''], ['[mey]/lan']);
				testConjugation('[\'Ey]/lan', ['', 'me', '', '', '', '', ''], ['[mEy]/lan']);
			});

			test('lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['', 'me', '', '', '', '', ''], ['me/[hel]/ku']);
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('[\'ll]/ngo', ['', 'me', '', '', '', '', ''], ['me/[\'ll]/ngo']);
				testConjugation('[\'rr]/pxom', ['', 'me', '', '', '', '', ''], ['me/[\'rr]/pxom']);
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('[Kel]/ku', ['', 'me', '', '', '', '', ''], ['me/[Hel]/ku']);
				testConjugation('Txon', ['', 'me', '', '', '', '', ''], ['me/[Ton]']);
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('[fwam]/pop', ['fì', 'me', '', '', '', '', ''], ['fì/me/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['tsa', 'me', '', '', '', '', ''], ['tsa/me/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['pe', 'me', '', '', '', '', ''], ['pe/me/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['fra', 'me', '', '', '', '', ''], ['fra/me/[fwam]/pop']);
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['fì', 'me', '', '', '', '', ''], ['fì/me/[hel]/ku']);
				testConjugation('[kel]/ku', ['tsa', 'me', '', '', '', '', ''], ['tsa/me/[hel]/ku']);
				testConjugation('[kel]/ku', ['pe', 'me', '', '', '', '', ''], ['pe/me/[hel]/ku']);
				testConjugation('[kel]/ku', ['fra', 'me', '', '', '', '', ''], ['fra/me/[hel]/ku']);
			});
		});

		describe('the trial prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('[fwam]/pop', ['', 'pxe', '', '', '', '', ''], ['pxe/[fwam]/pop']);
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('[Fwam]/pop', ['', 'pxe', '', '', '', '', ''], ['pxe/[Fwam]/pop']);
			});

			test('drops its -e if the noun starts with e-', (t) => {
				testConjugation('e/[kxan]', ['', 'pxe', '', '', '', '', ''], ['pxe/[kxan]']);
				testConjugation('E/[kxan]', ['', 'pxe', '', '', '', '', ''], ['pxE/[kxan]']);
			});

			test('drops its -e if the noun starts with ew-/ey-', (t) => {
				testConjugation('[ew]/ro', ['', 'pxe', '', '', '', '', ''], ['[pxew]/ro']);
				testConjugation('[Ew]/ro', ['', 'pxe', '', '', '', '', ''], ['[pxEw]/ro']);
				testConjugation('[eyk]/tan', ['', 'pxe', '', '', '', '', ''], ['[pxeyk]/tan']);
				testConjugation('[Eyk]/tan', ['', 'pxe', '', '', '', '', ''], ['[pxEyk]/tan']);
			});

			test('drops its -e if the noun starts with e- after lenition', (t) => {
				testConjugation('[\'ey]/lan', ['', 'pxe', '', '', '', '', ''], ['[pxey]/lan']);
				testConjugation('[\'Ey]/lan', ['', 'pxe', '', '', '', '', ''], ['[pxEy]/lan']);
			});

			test('lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['', 'pxe', '', '', '', '', ''], ['pxe/[hel]/ku']);
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('[\'ll]/ngo', ['', 'pxe', '', '', '', '', ''], ['pxe/[\'ll]/ngo']);
				testConjugation('[\'rr]/pxom', ['', 'pxe', '', '', '', '', ''], ['pxe/[\'rr]/pxom']);
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('[Kel]/ku', ['', 'pxe', '', '', '', '', ''], ['pxe/[Hel]/ku']);
				testConjugation('Txon', ['', 'pxe', '', '', '', '', ''], ['pxe/[Ton]']);
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('[fwam]/pop', ['fì', 'pxe', '', '', '', '', ''], ['fì/pxe/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['tsa', 'pxe', '', '', '', '', ''], ['tsa/pxe/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['fra', 'pxe', '', '', '', '', ''], ['fra/pxe/[fwam]/pop']);
			});

			test('when combined with pe+, gets lenited itself', (t) => {
				testConjugation('[fwam]/pop', ['pe', 'pxe', '', '', '', '', ''], ['pe/pe/[fwam]/pop']);
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['fì', 'pxe', '', '', '', '', ''], ['fì/pxe/[hel]/ku']);
				testConjugation('[kel]/ku', ['tsa', 'pxe', '', '', '', '', ''], ['tsa/pxe/[hel]/ku']);
				testConjugation('[kel]/ku', ['pe', 'pxe', '', '', '', '', ''], ['pe/pe/[hel]/ku']);
				testConjugation('[kel]/ku', ['fra', 'pxe', '', '', '', '', ''], ['fra/pxe/[hel]/ku']);
			});
		});

		describe('the general plural prefix', () => {
			test('is prepended to the noun', (t) => {
				testConjugation('[fwam]/pop', ['', 'ay', '', '', '', '', ''], ['ay/[fwam]/pop']);
			});

			test('preserves the initial uppercase letter of the noun', (t) => {
				testConjugation('[Fwam]/pop', ['', 'ay', '', '', '', '', ''], ['ay/[Fwam]/pop']);
			});

			test('lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['', 'ay', '', '', '', '', ''], ['ay/[hel]/ku', '[hel]/ku']);
			});

			test('doesn\'t lenite the noun if it starts with \'ll/\'rr', (t) => {
				testConjugation('[\'ll]/ngo', ['', 'ay', '', '', '', '', ''], ['ay/[\'ll]/ngo']);
				testConjugation('[\'rr]/pxom', ['', 'ay', '', '', '', '', ''], ['ay/[\'rr]/pxom']);
			});

			test('lenites the noun even if it starts with an uppercase letter', (t) => {
				testConjugation('[Kel]/ku', ['', 'ay', '', '', '', '', ''], ['ay/[Hel]/ku', '[Hel]/ku']);
				testConjugation('Txon', ['', 'ay', '', '', '', '', ''], ['ay/[Ton]', 'Ton']);
			});

			test('is optional if the noun underwent lenition', (t) => {
				testConjugation('[tu]/te', ['', 'ay', '', '', '', '', ''], ['ay/[su]/te', '[su]/te']);
				testConjugation('pxen', ['', 'ay', '', '', '', '', ''], ['ay/[pen]', 'pen']);
				testConjugation('[\'ey]/lan', ['', 'ay', '', '', '', '', ''], ['ay/[ey]/lan', '[ey]/lan']);
			});

			test('is not optional if the noun did not undergo lenition', (t) => {
				testConjugation('lun', ['', 'ay', '', '', '', '', ''], ['ay/[lun]']);
				testConjugation('sngel', ['', 'ay', '', '', '', '', ''], ['ay/[sngel]']);
				testConjugation('zum', ['', 'ay', '', '', '', '', ''], ['ay/[zum]']);
			});

			test('is not optional in the case of \'u', (t) => {
				testConjugation('\'u', ['', 'ay', '', '', '', '', ''], ['ay/[u]']);
			});

			test('is placed after a determiner prefix', (t) => {
				testConjugation('[fwam]/pop', ['fì', 'ay', '', '', '', '', ''], ['fì/ay/[fwam]/pop', 'fay/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['tsa', 'ay', '', '', '', '', ''], ['tsay/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['pe', 'ay', '', '', '', '', ''], ['pay/[fwam]/pop']);
				testConjugation('[fwam]/pop', ['fra', 'ay', '', '', '', '', ''], ['fray/[fwam]/pop']);
			});

			test('when combined with a determiner, still lenites the noun', (t) => {
				testConjugation('[kel]/ku', ['fì', 'ay', '', '', '', '', ''], ['fì/ay/[hel]/ku', 'fay/[hel]/ku']);
				testConjugation('[kel]/ku', ['tsa', 'ay', '', '', '', '', ''], ['tsay/[hel]/ku']);
				testConjugation('[kel]/ku', ['pe', 'ay', '', '', '', '', ''], ['pay/[hel]/ku']);
				testConjugation('[kel]/ku', ['fra', 'ay', '', '', '', '', ''], ['fray/[hel]/ku']);
			});
		});
	});

	describe('stem prefixes', () => {
		test('are prepended to the noun', (t) => {
			testConjugation('[fwam]/pop', ['', '', 'fne', '', '', '', ''], ['fne/[fwam]/pop']);
		});

		test('are placed after a plural prefix', (t) => {
			testConjugation('[fwam]/pop', ['', 'me', 'fne', '', '', '', ''], ['me/fne/[fwam]/pop']);
		});

		test('do not cause lenition', (t) => {
			testConjugation('[kel]/ku', ['', '', 'fne', '', '', '', ''], ['fne/[kel]/ku']);
		});

		test('block earlier leniting prefixes from leniting the noun', (t) => {
			testConjugation('[kel]/ku', ['pe', '', 'fne', '', '', '', ''], ['pe/fne/[kel]/ku']);
			testConjugation('[kel]/ku', ['', 'ay', 'fne', '', '', '', ''], ['ay/fne/[kel]/ku']);
		});

		test('contract when the noun starts with the same letter', (t) => {
			testConjugation('e/[kxan]', ['', '', 'fne', '', '', '', ''], ['fne/[kxan]']);
		});
	});

	describe('stem suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('[fwam]/pop', ['', '', '', 'fkeyk', '', '', ''], ['[fwam]/pop/fkeyk']);
			testConjugation('[fwam]/pop', ['', '', '', 'tsyìp', '', '', ''], ['[fwam]/pop/tsyìp']);
		});

		test('are placed before a determiner suffix', (t) => {
			testConjugation('ya', ['', '', '', 'fkeyk', 'pe', '', ''], ['[ya]/fkeyk/pe']);
		});

		test('determine the form of a following case suffix', (t) => {
			testConjugation('ya', ['', '', '', 'fkeyk', '', 't', ''], ['[ya]/fkey/kit', '[ya]/fkeyk/ti']);
			testConjugation('ya', ['', '', '', 'tsyìp', '', 'r', ''], ['[ya]/tsyì/pur']);
		});
	});

	describe('determiner suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('[fwam]/pop', ['', '', '', '', 'pe', '', ''], ['[fwam]/pop/pe']);
			testConjugation('[fwam]/pop', ['', '', '', '', 'o', '', ''], ['[fwam]/po/po']);
		});

		test('are placed before a case suffix', (t) => {
			testConjugation('ya', ['', '', '', '', 'pe', 'l', ''], ['[ya]/pel']);
		});

		test('determine the form of a following case suffix', (t) => {
			testConjugation('[fwam]/pop', ['', '', '', '', 'pe', 't', ''], ['[fwam]/pop/pet', '[fwam]/pop/peti']);
			testConjugation('[fwam]/pop', ['', '', '', '', 'o', 'r', ''], ['[fwam]/po/por', '[fwam]/po/po/ru']);
		});
	});

	describe('case suffixes', () => {
		describe('the agentive suffix', () => {
			test('is -ìl for nouns ending in a consonant', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'l', ''], ['[fwam]/po/pìl']);
			});

			test('is -ìl for nouns ending in a pseudovowel', (t) => {
				testConjugation('[\'e]/wll', ['', '', '', '', '', 'l', ''], ['[\'e]/wll/ìl']);
				testConjugation('trr', ['', '', '', '', '', 'l', ''], ['[trr]/ìl']);
			});

			test('is -l for nouns ending in a vowel', (t) => {
				testConjugation('[tu]/te', ['', '', '', '', '', 'l', ''], ['[tu]/tel']);
				testConjugation('tu/[té]', ['', '', '', '', '', 'l', ''], ['tu/[tél]']);
				testConjugation('[kel]/ku', ['', '', '', '', '', 'l', ''], ['[kel]/kul']);
			});

			test('is -ìl for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'l', ''], ['[taw]/ìl']);
				testConjugation('pay', ['', '', '', '', '', 'l', ''], ['[pay]/ìl']);
				testConjugation('fa/[hew]', ['', '', '', '', '', 'l', ''], ['fa/[hew]/ìl']);
				testConjugation('[kxe]/yey', ['', '', '', '', '', 'l', ''], ['[kxe]/yey/ìl']);
			});

			test('is -ìl for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('[Kel]/nì', ['', '', '', '', '', 'l', ''], ['[Kel]/nìl'], true);
				testConjugation('Ke/[rì]/smì/sì', ['', '', '', '', '', 'l', ''], ['Ke/[rì]/smì/sìl'], true);
			});
		});

		describe('the patientive suffix', () => {
			test('is -it/-ti for nouns ending in a consonant', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 't', ''], ['[fwam]/po/pit', '[fwam]/pop/ti']);
			});

			test('is -it/-ti for nouns ending in a pseudovowel', (t) => {
				testConjugation('[\'e]/wll', ['', '', '', '', '', 't', ''], ['[\'e]/wll/it', '[\'e]/wll/ti']);
				testConjugation('trr', ['', '', '', '', '', 't', ''], ['[trr]/it', '[trr]/ti']);
			});

			test('is -t(i) for nouns ending in a vowel', (t) => {
				testConjugation('[tu]/te', ['', '', '', '', '', 't', ''], ['[tu]/tet', '[tu]/te/ti']);
				testConjugation('tu/[té]', ['', '', '', '', '', 't', ''], ['tu/[tét]', 'tu/[té]/ti']);
				testConjugation('[kel]/ku', ['', '', '', '', '', 't', ''], ['[kel]/kut', '[kel]/ku/ti']);
			});

			test('is -it/-ti for nouns ending in the diphthongs -aw/-ew', (t) => {
				testConjugation('taw', ['', '', '', '', '', 't', ''], ['[taw]/it', '[taw]/ti']);
				testConjugation('fa/[hew]', ['', '', '', '', '', 't', ''], ['fa/[hew]/it', 'fa/[hew]/ti']);
			});

			test('is -(i)t/-ti for nouns ending in the diphthong -ay', (t) => {
				testConjugation('pay', ['', '', '', '', '', 't', ''], ['[pay]/it', 'payt', '[pay]/ti']);
			});

			test('is -t/-ti for nouns ending in the diphthong -ey', (t) => {
				testConjugation('[kxe]/yey', ['', '', '', '', '', 't', ''], ['[kxe]/yeyt', '[kxe]/yey/ti']);
			});

			test('is -it for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('[Kel]/nì', ['', '', '', '', '', 't', ''], ['[Kel]/nit'], true);
			});

			test('is -it/-ti for loanwords ending in -ì with preceding f/s/ts, with the -ì dropping', (t) => {
				testConjugation('Ke/[rì]/smì/sì', ['', '', '', '', '', 't', ''], ['Ke/[rì]/smì/sit', 'Ke/[rì]/smì/sti'], true);
			});
		});

		describe('the dative suffix', () => {
			test('is -ur for nouns ending in a consonant', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'r', ''], ['[fwam]/po/pur']);
			});

			test('is -ur for nouns ending in a pseudovowel', (t) => {
				testConjugation('[\'e]/wll', ['', '', '', '', '', 'r', ''], ['[\'e]/wll/ur']);
				testConjugation('trr', ['', '', '', '', '', 'r', ''], ['[trr]/ur']);
			});

			test('is -ur/-ru for nouns ending in \'', (t) => {
				testConjugation('o/[lo\']', ['', '', '', '', '', 'r', ''], ['o/[lo]/\'ur', 'o/[lo\']/ru']);
			});

			test('is -r(u) for nouns ending in a vowel', (t) => {
				testConjugation('[tu]/te', ['', '', '', '', '', 'r', ''], ['[tu]/ter', '[tu]/te/ru']);
				testConjugation('tu/[té]', ['', '', '', '', '', 'r', ''], ['tu/[tér]', 'tu/[té]/ru']);
				testConjugation('[kel]/ku', ['', '', '', '', '', 'r', ''], ['[kel]/kur', '[kel]/ku/ru']);
			});

			test('is -ur/-ru for nouns ending in the diphthongs -ay/-ey', (t) => {
				testConjugation('pay', ['', '', '', '', '', 'r', ''], ['[pay]/ur', '[pay]/ru']);
				testConjugation('[kxe]/yey', ['', '', '', '', '', 'r', ''], ['[kxe]/yey/ur', '[kxe]/yey/ru']);
			});

			test('is -(u)r/-ru for nouns ending in the diphthong -aw', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'r', ''], ['[taw]/ur', 'tawr', '[taw]/ru']);
			});

			test('is -r/-ru for nouns ending in the diphthong -ew', (t) => {
				testConjugation('fa/[hew]', ['', '', '', '', '', 'r', ''], ['fa/[hewr]', 'fa/[hew]/ru']);
			});

			test('is -ur for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('[Kel]/nì', ['', '', '', '', '', 'r', ''], ['[Kel]/nur'], true);
				testConjugation('Ke/[rì]/smì/sì', ['', '', '', '', '', 'r', ''], ['Ke/[rì]/smì/sur'], true);
			});
		});

		describe('the genitive suffix', () => {
			test('is -ä for nouns ending in a consonant', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'ä', ''], ['[fwam]/po/pä']);
			});

			test('is -ä for nouns ending in a pseudovowel', (t) => {
				testConjugation('[\'e]/wll', ['', '', '', '', '', 'ä', ''], ['[\'e]/wll/ä']);
				testConjugation('trr', ['', '', '', '', '', 'ä', ''], ['[trr]/ä']);
			});

			test('is -ä for nouns ending in the vowels -o/-u', (t) => {
				testConjugation('[a]/lo', ['', '', '', '', '', 'ä', ''], ['[a]/lo/ä']);
				testConjugation('[kel]/ku', ['', '', '', '', '', 'ä', ''], ['[kel]/ku/ä']);
			});

			test('is -yä for nouns ending in vowels other than -o/-u', (t) => {
				testConjugation('[\'a]/na', ['', '', '', '', '', 'ä', ''], ['[\'a]/na/yä']);
				testConjugation('ftxo/[zä]', ['', '', '', '', '', 'ä', ''], ['ftxo/[zä]/yä']);
				testConjugation('[tu]/te', ['', '', '', '', '', 'ä', ''], ['[tu]/te/yä']);
				testConjugation('tu/[té]', ['', '', '', '', '', 'ä', ''], ['tu/[té]/yä']);
				testConjugation('a/wa/i/[e]/i', ['', '', '', '', '', 'ä', ''], ['a/wa/i/[e]/i/yä']);
				testConjugation('vo/[spxì]', ['', '', '', '', '', 'ä', ''], ['vo/[spxì]/yä']);
			});

			test('is -iä for nouns ending in -ia, with the -ia dropping', (t) => {
				testConjugation('so/[a]/i/a', ['', '', '', '', '', 'ä', ''], ['so/[a]/i/ä']);
				testConjugation('tì/fti/[a]', ['', '', '', '', '', 'ä', ''], ['tì/fti/[ä]']);
			});

			test('is -ä for the word Omatikaya', (t) => {
				testConjugation('O/ma/ti/[ka]/ya', ['', '', '', '', '', 'ä', ''], ['O/ma/ti/[ka]/ya/ä']);
			});

			test('is -ä for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'ä', ''], ['[taw]/ä']);
				testConjugation('pay', ['', '', '', '', '', 'ä', ''], ['[pay]/ä']);
				testConjugation('fa/[hew]', ['', '', '', '', '', 'ä', ''], ['fa/[hew]/ä']);
				testConjugation('[kxe]/yey', ['', '', '', '', '', 'ä', ''], ['[kxe]/yey/ä']);
			});

			test('is -ä for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('[Kel]/nì', ['', '', '', '', '', 'ä', ''], ['[Kel]/nä'], true);
				testConjugation('Ke/[rì]/smì/sì', ['', '', '', '', '', 'ä', ''], ['Ke/[rì]/smì/sä'], true);
			});
		});

		describe('the topical suffix', () => {
			test('is -ìri for nouns ending in a consonant', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'ri', ''], ['[fwam]/po/pì/ri']);
			});

			test('is -ìri for nouns ending in a pseudovowel', (t) => {
				testConjugation('[\'e]/wll', ['', '', '', '', '', 'ri', ''], ['[\'e]/wll/ì/ri']);
				testConjugation('trr', ['', '', '', '', '', 'ri', ''], ['[trr]/ì/ri']);
			});

			test('is -ri for nouns ending in a vowel', (t) => {
				testConjugation('[tu]/te', ['', '', '', '', '', 'ri', ''], ['[tu]/te/ri']);
				testConjugation('tu/[té]', ['', '', '', '', '', 'ri', ''], ['tu/[té]/ri']);
				testConjugation('[kel]/ku', ['', '', '', '', '', 'ri', ''], ['[kel]/ku/ri']);
			});

			test('is -ri for nouns ending in a diphthong', (t) => {
				testConjugation('taw', ['', '', '', '', '', 'ri', ''], ['[taw]/ri']);
				testConjugation('pay', ['', '', '', '', '', 'ri', ''], ['[pay]/ri']);
				testConjugation('fa/[hew]', ['', '', '', '', '', 'ri', ''], ['fa/[hew]/ri']);
				testConjugation('[kxe]/yey', ['', '', '', '', '', 'ri', ''], ['[kxe]/yey/ri']);
			});

			test('is -ìri for loanwords ending in -ì, with the -ì dropping', (t) => {
				testConjugation('[Kel]/nì', ['', '', '', '', '', 'ri', ''], ['[Kel]/nì/ri'], true);
				testConjugation('Ke/[rì]/smì/sì', ['', '', '', '', '', 'ri', ''], ['Ke/[rì]/smì/sì/ri'], true);
			});
		});

		describe('an adposition', () => {
			test('is appended to the noun', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'mì', ''], ['[fwam]/pop/mì']);
			});

			test('loses its stressed syllable', (t) => {
				testConjugation('[fwam]/pop', ['', '', '', '', '', 'ta/[lun]', ''], ['[fwam]/pop/ta/lun']);
			});
		});
	});

	describe('final suffixes', () => {
		test('are appended to the noun', (t) => {
			testConjugation('[fwam]/pop', ['', '', '', '', '', '', 'sì'], ['[fwam]/pop/sì']);
		});

		test('are placed after a case suffix', (t) => {
			testConjugation('[fwam]/pop', ['', '', '', '', '', 'l', 'sì'], ['[fwam]/po/pìl/sì']);
			testConjugation('[fwam]/pop', ['', '', '', '', '', 'ftu', 'to'], ['[fwam]/pop/ftu/to']);
		});
	});

	/*describe('simplified conjugation output', () => {
		test('behaves correctly with a case ending', (t) => {
			assert.strictEqual(conjugateSimple('tute', '', 'l', 'FN'), '-tute-l');
		});

		test('behaves correctly with a plural prefix', (t) => {
			assert.strictEqual(conjugateSimple('fwampop', 'me', '', 'FN'), 'me-fwampop-');
			assert.strictEqual(conjugateSimple('fwampop', 'pxe', '', 'FN'), 'pxe-fwampop-');
			assert.strictEqual(conjugateSimple('fwampop', 'ay', '', 'FN'), 'ay-fwampop-');
			assert.strictEqual(conjugateSimple('tute', 'me', '', 'FN'), 'me-{s}ute-');
			assert.strictEqual(conjugateSimple('tute', 'pxe', '', 'FN'), 'pxe-{s}ute-');
			assert.strictEqual(conjugateSimple('tute', 'ay', '', 'FN'), '(ay)-{s}ute-');
		});

		test('behaves correctly with a plural prefix and a case ending', (t) => {
			assert.strictEqual(conjugateSimple('tute', 'ay', 'l', 'FN'), '(ay)-{s}ute-l');
		});

		test('behaves correctly for nouns starting with an uppercase letter', (t) => {
			assert.strictEqual(conjugateSimple('Iknimaya', 'ay', 'l', 'FN'), 'ay-Iknimaya-l');
			assert.strictEqual(conjugateSimple('Kelutral', 'ay', 'l', 'FN'), '(ay)-{H}elutral-ìl');
		});
	});*/

	describe('tricky parsing cases: the parser', (t) => {
		test('should never return empty roots', (t) => {
			const result = parse('be', 'FN');
			for (const possibility of result) {
				if (possibility.root === '') {
					assert.fail('parser returned empty root');
				}
			}
		});

		test('shouldn\'t crash on empty or short inputs', (t) => {
			parse('', 'FN');
			parse('a', 'FN');
			parse('be', 'FN');
		});
	});
});
